/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CmdbData as PrismaCmdbData } from "@prisma/client";

export class CmdbDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CmdbDataCountArgs, "select">): Promise<number> {
    return this.prisma.cmdbData.count(args);
  }

  async cmdbDataItems(
    args: Prisma.CmdbDataFindManyArgs
  ): Promise<PrismaCmdbData[]> {
    return this.prisma.cmdbData.findMany(args);
  }
  async cmdbData(
    args: Prisma.CmdbDataFindUniqueArgs
  ): Promise<PrismaCmdbData | null> {
    return this.prisma.cmdbData.findUnique(args);
  }
  async createCmdbData(
    args: Prisma.CmdbDataCreateArgs
  ): Promise<PrismaCmdbData> {
    return this.prisma.cmdbData.create(args);
  }
  async updateCmdbData(
    args: Prisma.CmdbDataUpdateArgs
  ): Promise<PrismaCmdbData> {
    return this.prisma.cmdbData.update(args);
  }
  async deleteCmdbData(
    args: Prisma.CmdbDataDeleteArgs
  ): Promise<PrismaCmdbData> {
    return this.prisma.cmdbData.delete(args);
  }
}
