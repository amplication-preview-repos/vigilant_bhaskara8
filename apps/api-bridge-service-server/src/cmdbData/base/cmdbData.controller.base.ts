/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CmdbDataService } from "../cmdbData.service";
import { CmdbDataCreateInput } from "./CmdbDataCreateInput";
import { CmdbData } from "./CmdbData";
import { CmdbDataFindManyArgs } from "./CmdbDataFindManyArgs";
import { CmdbDataWhereUniqueInput } from "./CmdbDataWhereUniqueInput";
import { CmdbDataUpdateInput } from "./CmdbDataUpdateInput";

export class CmdbDataControllerBase {
  constructor(protected readonly service: CmdbDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CmdbData })
  async createCmdbData(
    @common.Body() data: CmdbDataCreateInput
  ): Promise<CmdbData> {
    return await this.service.createCmdbData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        itemDetails: true,
        itemName: true,
        lastUpdated: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CmdbData] })
  @ApiNestedQuery(CmdbDataFindManyArgs)
  async cmdbDataItems(@common.Req() request: Request): Promise<CmdbData[]> {
    const args = plainToClass(CmdbDataFindManyArgs, request.query);
    return this.service.cmdbDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        itemDetails: true,
        itemName: true,
        lastUpdated: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CmdbData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cmdbData(
    @common.Param() params: CmdbDataWhereUniqueInput
  ): Promise<CmdbData | null> {
    const result = await this.service.cmdbData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        itemDetails: true,
        itemName: true,
        lastUpdated: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CmdbData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCmdbData(
    @common.Param() params: CmdbDataWhereUniqueInput,
    @common.Body() data: CmdbDataUpdateInput
  ): Promise<CmdbData | null> {
    try {
      return await this.service.updateCmdbData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          itemDetails: true,
          itemName: true,
          lastUpdated: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CmdbData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCmdbData(
    @common.Param() params: CmdbDataWhereUniqueInput
  ): Promise<CmdbData | null> {
    try {
      return await this.service.deleteCmdbData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          itemDetails: true,
          itemName: true,
          lastUpdated: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
