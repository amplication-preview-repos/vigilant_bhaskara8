/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CmdbData } from "./CmdbData";
import { CmdbDataCountArgs } from "./CmdbDataCountArgs";
import { CmdbDataFindManyArgs } from "./CmdbDataFindManyArgs";
import { CmdbDataFindUniqueArgs } from "./CmdbDataFindUniqueArgs";
import { CreateCmdbDataArgs } from "./CreateCmdbDataArgs";
import { UpdateCmdbDataArgs } from "./UpdateCmdbDataArgs";
import { DeleteCmdbDataArgs } from "./DeleteCmdbDataArgs";
import { CmdbDataService } from "../cmdbData.service";
@graphql.Resolver(() => CmdbData)
export class CmdbDataResolverBase {
  constructor(protected readonly service: CmdbDataService) {}

  async _cmdbDataItemsMeta(
    @graphql.Args() args: CmdbDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CmdbData])
  async cmdbDataItems(
    @graphql.Args() args: CmdbDataFindManyArgs
  ): Promise<CmdbData[]> {
    return this.service.cmdbDataItems(args);
  }

  @graphql.Query(() => CmdbData, { nullable: true })
  async cmdbData(
    @graphql.Args() args: CmdbDataFindUniqueArgs
  ): Promise<CmdbData | null> {
    const result = await this.service.cmdbData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CmdbData)
  async createCmdbData(
    @graphql.Args() args: CreateCmdbDataArgs
  ): Promise<CmdbData> {
    return await this.service.createCmdbData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CmdbData)
  async updateCmdbData(
    @graphql.Args() args: UpdateCmdbDataArgs
  ): Promise<CmdbData | null> {
    try {
      return await this.service.updateCmdbData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CmdbData)
  async deleteCmdbData(
    @graphql.Args() args: DeleteCmdbDataArgs
  ): Promise<CmdbData | null> {
    try {
      return await this.service.deleteCmdbData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
