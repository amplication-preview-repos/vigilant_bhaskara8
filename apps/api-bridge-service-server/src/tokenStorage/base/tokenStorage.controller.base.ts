/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TokenStorageService } from "../tokenStorage.service";
import { TokenStorageCreateInput } from "./TokenStorageCreateInput";
import { TokenStorage } from "./TokenStorage";
import { TokenStorageFindManyArgs } from "./TokenStorageFindManyArgs";
import { TokenStorageWhereUniqueInput } from "./TokenStorageWhereUniqueInput";
import { TokenStorageUpdateInput } from "./TokenStorageUpdateInput";

export class TokenStorageControllerBase {
  constructor(protected readonly service: TokenStorageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TokenStorage })
  async createTokenStorage(
    @common.Body() data: TokenStorageCreateInput
  ): Promise<TokenStorage> {
    return await this.service.createTokenStorage({
      data: data,
      select: {
        createdAt: true,
        expiry: true,
        id: true,
        serviceName: true,
        token: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TokenStorage] })
  @ApiNestedQuery(TokenStorageFindManyArgs)
  async tokenStorages(@common.Req() request: Request): Promise<TokenStorage[]> {
    const args = plainToClass(TokenStorageFindManyArgs, request.query);
    return this.service.tokenStorages({
      ...args,
      select: {
        createdAt: true,
        expiry: true,
        id: true,
        serviceName: true,
        token: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TokenStorage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tokenStorage(
    @common.Param() params: TokenStorageWhereUniqueInput
  ): Promise<TokenStorage | null> {
    const result = await this.service.tokenStorage({
      where: params,
      select: {
        createdAt: true,
        expiry: true,
        id: true,
        serviceName: true,
        token: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TokenStorage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTokenStorage(
    @common.Param() params: TokenStorageWhereUniqueInput,
    @common.Body() data: TokenStorageUpdateInput
  ): Promise<TokenStorage | null> {
    try {
      return await this.service.updateTokenStorage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          expiry: true,
          id: true,
          serviceName: true,
          token: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TokenStorage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTokenStorage(
    @common.Param() params: TokenStorageWhereUniqueInput
  ): Promise<TokenStorage | null> {
    try {
      return await this.service.deleteTokenStorage({
        where: params,
        select: {
          createdAt: true,
          expiry: true,
          id: true,
          serviceName: true,
          token: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
