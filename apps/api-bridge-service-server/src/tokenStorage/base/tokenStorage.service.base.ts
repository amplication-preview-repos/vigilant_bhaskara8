/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TokenStorage as PrismaTokenStorage } from "@prisma/client";

export class TokenStorageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TokenStorageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tokenStorage.count(args);
  }

  async tokenStorages(
    args: Prisma.TokenStorageFindManyArgs
  ): Promise<PrismaTokenStorage[]> {
    return this.prisma.tokenStorage.findMany(args);
  }
  async tokenStorage(
    args: Prisma.TokenStorageFindUniqueArgs
  ): Promise<PrismaTokenStorage | null> {
    return this.prisma.tokenStorage.findUnique(args);
  }
  async createTokenStorage(
    args: Prisma.TokenStorageCreateArgs
  ): Promise<PrismaTokenStorage> {
    return this.prisma.tokenStorage.create(args);
  }
  async updateTokenStorage(
    args: Prisma.TokenStorageUpdateArgs
  ): Promise<PrismaTokenStorage> {
    return this.prisma.tokenStorage.update(args);
  }
  async deleteTokenStorage(
    args: Prisma.TokenStorageDeleteArgs
  ): Promise<PrismaTokenStorage> {
    return this.prisma.tokenStorage.delete(args);
  }
}
