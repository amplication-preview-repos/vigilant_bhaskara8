/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ArisData } from "./ArisData";
import { ArisDataCountArgs } from "./ArisDataCountArgs";
import { ArisDataFindManyArgs } from "./ArisDataFindManyArgs";
import { ArisDataFindUniqueArgs } from "./ArisDataFindUniqueArgs";
import { CreateArisDataArgs } from "./CreateArisDataArgs";
import { UpdateArisDataArgs } from "./UpdateArisDataArgs";
import { DeleteArisDataArgs } from "./DeleteArisDataArgs";
import { ArisDataService } from "../arisData.service";
@graphql.Resolver(() => ArisData)
export class ArisDataResolverBase {
  constructor(protected readonly service: ArisDataService) {}

  async _arisDataItemsMeta(
    @graphql.Args() args: ArisDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ArisData])
  async arisDataItems(
    @graphql.Args() args: ArisDataFindManyArgs
  ): Promise<ArisData[]> {
    return this.service.arisDataItems(args);
  }

  @graphql.Query(() => ArisData, { nullable: true })
  async arisData(
    @graphql.Args() args: ArisDataFindUniqueArgs
  ): Promise<ArisData | null> {
    const result = await this.service.arisData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ArisData)
  async createArisData(
    @graphql.Args() args: CreateArisDataArgs
  ): Promise<ArisData> {
    return await this.service.createArisData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ArisData)
  async updateArisData(
    @graphql.Args() args: UpdateArisDataArgs
  ): Promise<ArisData | null> {
    try {
      return await this.service.updateArisData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ArisData)
  async deleteArisData(
    @graphql.Args() args: DeleteArisDataArgs
  ): Promise<ArisData | null> {
    try {
      return await this.service.deleteArisData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
