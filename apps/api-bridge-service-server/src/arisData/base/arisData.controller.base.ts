/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArisDataService } from "../arisData.service";
import { ArisDataCreateInput } from "./ArisDataCreateInput";
import { ArisData } from "./ArisData";
import { ArisDataFindManyArgs } from "./ArisDataFindManyArgs";
import { ArisDataWhereUniqueInput } from "./ArisDataWhereUniqueInput";
import { ArisDataUpdateInput } from "./ArisDataUpdateInput";

export class ArisDataControllerBase {
  constructor(protected readonly service: ArisDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ArisData })
  async createArisData(
    @common.Body() data: ArisDataCreateInput
  ): Promise<ArisData> {
    return await this.service.createArisData({
      data: data,
      select: {
        attributeName: true,
        attributeValue: true,
        createdAt: true,
        id: true,
        lastSynced: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ArisData] })
  @ApiNestedQuery(ArisDataFindManyArgs)
  async arisDataItems(@common.Req() request: Request): Promise<ArisData[]> {
    const args = plainToClass(ArisDataFindManyArgs, request.query);
    return this.service.arisDataItems({
      ...args,
      select: {
        attributeName: true,
        attributeValue: true,
        createdAt: true,
        id: true,
        lastSynced: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ArisData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async arisData(
    @common.Param() params: ArisDataWhereUniqueInput
  ): Promise<ArisData | null> {
    const result = await this.service.arisData({
      where: params,
      select: {
        attributeName: true,
        attributeValue: true,
        createdAt: true,
        id: true,
        lastSynced: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ArisData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArisData(
    @common.Param() params: ArisDataWhereUniqueInput,
    @common.Body() data: ArisDataUpdateInput
  ): Promise<ArisData | null> {
    try {
      return await this.service.updateArisData({
        where: params,
        data: data,
        select: {
          attributeName: true,
          attributeValue: true,
          createdAt: true,
          id: true,
          lastSynced: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ArisData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArisData(
    @common.Param() params: ArisDataWhereUniqueInput
  ): Promise<ArisData | null> {
    try {
      return await this.service.deleteArisData({
        where: params,
        select: {
          attributeName: true,
          attributeValue: true,
          createdAt: true,
          id: true,
          lastSynced: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
