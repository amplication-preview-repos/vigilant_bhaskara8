/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ArisData as PrismaArisData } from "@prisma/client";

export class ArisDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArisDataCountArgs, "select">): Promise<number> {
    return this.prisma.arisData.count(args);
  }

  async arisDataItems(
    args: Prisma.ArisDataFindManyArgs
  ): Promise<PrismaArisData[]> {
    return this.prisma.arisData.findMany(args);
  }
  async arisData(
    args: Prisma.ArisDataFindUniqueArgs
  ): Promise<PrismaArisData | null> {
    return this.prisma.arisData.findUnique(args);
  }
  async createArisData(
    args: Prisma.ArisDataCreateArgs
  ): Promise<PrismaArisData> {
    return this.prisma.arisData.create(args);
  }
  async updateArisData(
    args: Prisma.ArisDataUpdateArgs
  ): Promise<PrismaArisData> {
    return this.prisma.arisData.update(args);
  }
  async deleteArisData(
    args: Prisma.ArisDataDeleteArgs
  ): Promise<PrismaArisData> {
    return this.prisma.arisData.delete(args);
  }
}
